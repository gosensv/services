package com.chrrissoft.services

import android.Manifest.permission.ACTIVITY_RECOGNITION
import android.Manifest.permission.HIGH_SAMPLING_RATE_SENSORS
import android.Manifest.permission.MANAGE_OWN_CALLS
import android.Manifest.permission.SCHEDULE_EXACT_ALARM
import android.Manifest.permission.USE_EXACT_ALARM
import android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_CAMERA
import android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_DATA_SYNC
import android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_HEALTH
import android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_LOCATION
import android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_MEDIA_PLAYBACK
import android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_MICROPHONE
import android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_PHONE_CALL
import android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_SHORT_SERVICE
import android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_SPECIAL_USE
import android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_SYSTEM_EXEMPTED
import android.os.Build.VERSION.SDK_INT
import android.os.Build.VERSION_CODES.O
import android.os.Build.VERSION_CODES.Q
import android.os.Build.VERSION_CODES.S
import android.os.Build.VERSION_CODES.TIRAMISU
import android.os.Build.VERSION_CODES.UPSIDE_DOWN_CAKE

object Constants {
    const val GENERAL_NOTIFICATIONS_CHANNEL_ID =
        "com.chrrissoft.services.GENERAL_NOTIFICATIONS_CHANNEL_ID"
    const val ACTION_START_FOREGROUND_SERVICE =
        "com.chrrissoft.services.ACTION_START_FOREGROUND_SERVICE"
    const val ACTION_STOP_FOREGROUND_SERVICE =
        "com.chrrissoft.services.ACTION_STOP_FOREGROUND_SERVICE"
    const val EXTRA_STOP_SERVICE_AFTER_WORK =
        "com.chrrissoft.services.EXTRA_STOP_SERVICE_AFTER_WORK"


    val FOREGROUND_SERVICE_TYPE_CAMERA_COMPAT =
        if (SDK_INT >= S) FOREGROUND_SERVICE_TYPE_CAMERA else 0
    val FOREGROUND_SERVICE_TYPE_MICROPHONE_COMPAT =
        if (SDK_INT >= S) FOREGROUND_SERVICE_TYPE_MICROPHONE else 0
    val FOREGROUND_SERVICE_TYPE_LOCATION_COMPAT =
        if (SDK_INT >= S) FOREGROUND_SERVICE_TYPE_LOCATION else 0
    val FOREGROUND_SERVICE_TYPE_HEALTH_COMPAT =
        if (SDK_INT >= UPSIDE_DOWN_CAKE) FOREGROUND_SERVICE_TYPE_HEALTH else 0
    val FOREGROUND_SERVICE_TYPE_DATA_SYNC_COMPAT =
        if (SDK_INT >= UPSIDE_DOWN_CAKE) FOREGROUND_SERVICE_TYPE_DATA_SYNC else 0
    val FOREGROUND_SERVICE_TYPE_MEDIA_PLAYBACK_COMPAT =
        if (SDK_INT >= Q) FOREGROUND_SERVICE_TYPE_MEDIA_PLAYBACK else 0
    val FOREGROUND_SERVICE_TYPE_PHONE_CALL_COMPAT =
        if (SDK_INT >= Q) FOREGROUND_SERVICE_TYPE_PHONE_CALL else 0
    val FOREGROUND_SERVICE_TYPE_SHORT_SERVICE_COMPAT =
        if (SDK_INT >= UPSIDE_DOWN_CAKE) FOREGROUND_SERVICE_TYPE_SHORT_SERVICE else 0
    val FOREGROUND_SERVICE_TYPE_SPECIAL_USE_COMPAT =
        if (SDK_INT >= UPSIDE_DOWN_CAKE) FOREGROUND_SERVICE_TYPE_SPECIAL_USE else 0
    val FOREGROUND_SERVICE_TYPE_SYSTEM_EXEMPTED_COMPAT =
        if (SDK_INT >= UPSIDE_DOWN_CAKE) FOREGROUND_SERVICE_TYPE_SYSTEM_EXEMPTED else 0


    val MANAGE_OWN_CALLS_COMPAT = if (SDK_INT >= O) MANAGE_OWN_CALLS else ""
    val HIGH_SAMPLING_RATE_SENSORS_COMPAT = if (SDK_INT >= S) HIGH_SAMPLING_RATE_SENSORS else ""
    val ACTIVITY_RECOGNITION_COMPAT = if (SDK_INT >= Q) ACTIVITY_RECOGNITION else ""
}
